# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on: push

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      # with:
      #   persist-credentials: false
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build, install and test package
      run: |
        python setup.py bdist_wheel
        pip install dist/*.whl --upgrade
        cd test
        pytest -vs
#    - name: Build documentation
#      run: |
#        pip install sphinx sphinx_rtd_theme
#        cd doc
#        make html
#        cp -arv getting-started build/html
#        ! [ -e build/html/.nojekyll ] && touch build/html/.nojekyll
#    - name: Publish documentation
#      uses: JamesIves/github-pages-deploy-action@3.7.1
#      with:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        BRANCH: gh-pages
#        FOLDER: doc/build/html
#        CLEAN: true
    - name: Publish package to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
